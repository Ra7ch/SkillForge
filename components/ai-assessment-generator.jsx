"use client"

import { useState } from "react"
import { Check, X, BookOpen, Brain, Send, Download, Loader2, RefreshCw } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"

export default function AIAssessmentGenerator({ userProfession, userSpecializations = [] }) {
  const [assessmentType, setAssessmentType] = useState("practice")
  const [difficultyLevel, setDifficultyLevel] = useState("intermediate")
  const [numberOfQuestions, setNumberOfQuestions] = useState(10)
  const [selectedSpecialization, setSelectedSpecialization] = useState(userSpecializations[0] || "")
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedAssessment, setGeneratedAssessment] = useState(null)
  const [currentTab, setCurrentTab] = useState("configure")
  const [showAnswers, setShowAnswers] = useState(false)

  // Sample questions by specialization (in a real implementation, these would be generated by AI)
  const questionsBySpecialization = {
    "Agronomy": [
      {
        question: "What is the optimal soil pH range for most crop plants?",
        options: ["3.0-4.5", "5.5-7.0", "8.0-9.5", "10.0-11.5"],
        correctAnswer: 1,
        explanation: "Most crop plants thrive in slightly acidic to neutral soils with a pH range of 5.5-7.0, as this range generally provides optimal nutrient availability."
      },
      {
        question: "Which nutrient is primarily responsible for leaf growth and green color in plants?",
        options: ["Phosphorus", "Potassium", "Nitrogen", "Calcium"],
        correctAnswer: 2,
        explanation: "Nitrogen is essential for chlorophyll production, which gives plants their green color and is crucial for photosynthesis and leaf development."
      },
      {
        question: "What is crop rotation primarily used for?",
        options: ["To increase water usage", "To prevent pest and disease buildup", "To decrease soil fertility", "To simplify farm management"],
        correctAnswer: 1,
        explanation: "Crop rotation is practiced to break pest and disease cycles, improve soil structure, and maintain soil fertility by alternating different crops in the same area across growing seasons."
      },
    ],
    "Horticulture": [
      {
        question: "Which of the following is NOT a common method of plant propagation?",
        options: ["Cutting", "Layering", "Grafting", "Photocopying"],
        correctAnswer: 3,
        explanation: "Photocopying is not a plant propagation method. Common methods include cuttings, layering, grafting, budding, and seed propagation."
      },
      {
        question: "What is the primary purpose of pruning fruit trees?",
        options: ["To make them look attractive", "To increase fruit production and tree health", "To reduce the tree's height", "To eliminate the need for fertilizer"],
        correctAnswer: 1,
        explanation: "While pruning can achieve multiple objectives, its primary purpose for fruit trees is to optimize fruit production by improving light penetration, air circulation, and removing diseased or unproductive branches."
      },
    ],
    "Dairy Science": [
      {
        question: "What is the average lactation period for dairy cows?",
        options: ["100 days", "200 days", "305 days", "500 days"],
        correctAnswer: 2,
        explanation: "The standard lactation period for dairy cows is typically 305 days, followed by a 60-day dry period before the next calving."
      },
      {
        question: "Which of the following factors does NOT affect milk composition?",
        options: ["Breed", "Diet", "Stage of lactation", "Color of the barn"],
        correctAnswer: 3,
        explanation: "The color of the barn has no impact on milk composition. Factors that do affect milk composition include the cow's breed, diet, stage of lactation, health status, and environmental conditions."
      }
    ]
  }

  // Generate assessment based on user preferences
  const generateAssessment = () => {
    setIsGenerating(true)
    
    // Simulate API call delay
    setTimeout(() => {
      let questions = []
      
      // In a real implementation, this would call an AI API
      if (questionsBySpecialization[selectedSpecialization]) {
        questions = questionsBySpecialization[selectedSpecialization]
      } else {
        // Fallback to agronomy questions if specialization not found
        questions = questionsBySpecialization["Agronomy"]
      }
      
      // Limiting to the requested number
      questions = questions.slice(0, numberOfQuestions)
      
      setGeneratedAssessment({
        title: `${selectedSpecialization} ${difficultyLevel.charAt(0).toUpperCase() + difficultyLevel.slice(1)} Assessment`,
        description: `A ${difficultyLevel} level assessment on ${selectedSpecialization} concepts for ${assessmentType === "practice" ? "practice" : "certification"}.`,
        questions
      })
      
      setIsGenerating(false)
      setCurrentTab("assessment")
    }, 2000)
  }

  // Reset the form and generated assessment
  const resetAssessment = () => {
    setGeneratedAssessment(null)
    setCurrentTab("configure")
    setShowAnswers(false)
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <div className="flex items-center gap-2">
          <Brain className="h-5 w-5 text-orange-500" />
          <CardTitle>AI Assessment Generator</CardTitle>
        </div>
        <CardDescription>
          Generate customized assessments for agricultural specializations
        </CardDescription>
      </CardHeader>
      
      <Tabs value={currentTab} onValueChange={setCurrentTab}>
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="configure">Configure</TabsTrigger>
          <TabsTrigger value="assessment" disabled={!generatedAssessment}>Assessment</TabsTrigger>
        </TabsList>
        
        <TabsContent value="configure">
          <CardContent className="space-y-4 pt-4">
            <div>
              <Label htmlFor="assessment-type">Assessment Type</Label>
              <RadioGroup
                id="assessment-type"
                value={assessmentType}
                onValueChange={setAssessmentType}
                className="flex flex-col space-y-1 mt-2"
              >
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="practice" id="practice" />
                  <Label htmlFor="practice">Practice (For self-assessment)</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="certification" id="certification" />
                  <Label htmlFor="certification">Certification (For formal evaluation)</Label>
                </div>
              </RadioGroup>
            </div>
            
            <div>
              <Label htmlFor="specialization">Specialization</Label>
              <Select
                value={selectedSpecialization}
                onValueChange={setSelectedSpecialization}
              >
                <SelectTrigger id="specialization" className="mt-2">
                  <SelectValue placeholder="Select specialization" />
                </SelectTrigger>
                <SelectContent>
                  {userSpecializations.length > 0 ? (
                    userSpecializations.map((spec) => (
                      <SelectItem key={spec} value={spec}>{spec}</SelectItem>
                    ))
                  ) : (
                    <>
                      <SelectItem value="Agronomy">Agronomy</SelectItem>
                      <SelectItem value="Horticulture">Horticulture</SelectItem>
                      <SelectItem value="Plant Breeding and Genetics">Plant Breeding and Genetics</SelectItem>
                      <SelectItem value="Animal Husbandry">Animal Husbandry</SelectItem>
                      <SelectItem value="Dairy Science">Dairy Science</SelectItem>
                    </>
                  )}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Label htmlFor="difficulty">Difficulty Level</Label>
              <Select
                value={difficultyLevel}
                onValueChange={setDifficultyLevel}
              >
                <SelectTrigger id="difficulty" className="mt-2">
                  <SelectValue placeholder="Select difficulty" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="beginner">Beginner</SelectItem>
                  <SelectItem value="intermediate">Intermediate</SelectItem>
                  <SelectItem value="advanced">Advanced</SelectItem>
                  <SelectItem value="expert">Expert</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Label htmlFor="questions">Number of Questions</Label>
              <Select
                value={numberOfQuestions.toString()}
                onValueChange={(value) => setNumberOfQuestions(parseInt(value))}
              >
                <SelectTrigger id="questions" className="mt-2">
                  <SelectValue placeholder="Select number of questions" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="5">5 Questions</SelectItem>
                  <SelectItem value="10">10 Questions</SelectItem>
                  <SelectItem value="15">15 Questions</SelectItem>
                  <SelectItem value="20">20 Questions</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          
          <CardFooter className="flex justify-between">
            <Button variant="outline" onClick={resetAssessment}>
              Reset
            </Button>
            <Button 
              onClick={generateAssessment} 
              disabled={isGenerating || !selectedSpecialization}
              className="bg-orange-500 hover:bg-orange-600"
            >
              {isGenerating ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" /> 
                  Generating
                </>
              ) : (
                <>
                  <Brain className="mr-2 h-4 w-4" /> 
                  Generate Assessment
                </>
              )}
            </Button>
          </CardFooter>
        </TabsContent>
        
        <TabsContent value="assessment">
          {generatedAssessment && (
            <CardContent className="pt-4">
              <div className="mb-6">
                <h3 className="text-xl font-bold mb-1">{generatedAssessment.title}</h3>
                <p className="text-gray-500">{generatedAssessment.description}</p>
              </div>
              
              <div className="space-y-6">
                {generatedAssessment.questions.map((q, qIndex) => (
                  <div key={qIndex} className="border rounded-lg p-4">
                    <h4 className="font-medium mb-3">
                      Question {qIndex + 1}: {q.question}
                    </h4>
                    <RadioGroup
                      className="space-y-2"
                      disabled={showAnswers}
                    >
                      {q.options.map((option, oIndex) => (
                        <div key={oIndex} className={`flex items-center space-x-2 p-2 rounded ${
                          showAnswers && oIndex === q.correctAnswer ? 'bg-green-50 border border-green-200' : ''
                        }`}>
                          <RadioGroupItem value={oIndex.toString()} id={`q${qIndex}-o${oIndex}`} />
                          <Label htmlFor={`q${qIndex}-o${oIndex}`} className="flex-grow">
                            {option}
                          </Label>
                          {showAnswers && oIndex === q.correctAnswer && (
                            <Check className="h-4 w-4 text-green-500" />
                          )}
                        </div>
                      ))}
                    </RadioGroup>
                    
                    {showAnswers && (
                      <div className="mt-3 p-3 bg-blue-50 rounded border border-blue-200">
                        <p className="text-sm font-medium text-blue-800">Explanation:</p>
                        <p className="text-sm text-blue-700">{q.explanation}</p>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          )}
          
          <CardFooter className="flex flex-wrap justify-between gap-2">
            <Button variant="outline" onClick={resetAssessment}>
              <RefreshCw className="mr-2 h-4 w-4" />
              Create New Assessment
            </Button>
            
            <div className="flex gap-2">
              <Button 
                variant="outline" 
                onClick={() => setShowAnswers(!showAnswers)}
              >
                {showAnswers ? (
                  <>
                    <X className="mr-2 h-4 w-4" />
                    Hide Answers
                  </>
                ) : (
                  <>
                    <Check className="mr-2 h-4 w-4" />
                    Show Answers
                  </>
                )}
              </Button>
              
              <Button className="bg-orange-500 hover:bg-orange-600">
                <Download className="mr-2 h-4 w-4" />
                Download PDF
              </Button>
            </div>
          </CardFooter>
        </TabsContent>
      </Tabs>
    </Card>
  )
} 